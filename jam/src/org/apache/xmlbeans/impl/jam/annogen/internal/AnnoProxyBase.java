/*   Copyright 2004 The Apache Software Foundation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.xmlbeans.impl.jam.annogen.internal;

import org.apache.xmlbeans.impl.jam.annogen.provider.AnnoProxy;
import org.apache.xmlbeans.impl.jam.annogen.provider.ProviderContext;
import org.apache.xmlbeans.impl.jam.annogen.provider.AnnoType;
import org.apache.xmlbeans.impl.jam.annogen.tools.Annogen;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Array;
import java.util.Arrays;

/**
 * <p>Base implementation of AnnotationProxy.  This serves as a base for
 * classes generated by annogen.  Its main responsibility is to accept
 * 'set value' requests from a ProxyPopulator and transform them into
 * reflective invocations on methods on the extending class.</p>
 *
 * @author Patrick Calahan &lt;email: pcal-at-bea-dot-com&gt;
 */
public /*abstract*/ class AnnoProxyBase implements AnnoProxy {

  // ========================================================================
  // AnnotationProxy implementation

  /**
   * Just try to set the value via reflection.
   */ 
  public boolean setValue(String valueName, Object value)
  {
    String methodName = Annogen.SETTER_PREFIX + valueName;
    Method[] m = this.getClass().getMethods();
    for(int i=0; i<m.length; i++) {
      //FIXME this is lazy, doing it this way because it's easier than dealing
      //with autoboxing and type narrowing needed for getMethod(name,params).
      if (m[i].getName().equals(methodName)) {
        try {
          m[i].invoke(this, new Object[]{value});
        } catch (IllegalAccessException e) {
          e.printStackTrace();  //FIXME
        } catch (InvocationTargetException e) {
          e.printStackTrace();  //FIXME
        }
        return true;
      }
    }
    return false;
  }

  public Object getValue(String name) {
    return null;//FIXME
  }

  public boolean isDefaultValueUsed(String valueName) {
    return false; //FIXME
  }
}
