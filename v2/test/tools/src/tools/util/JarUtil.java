package tools.util;import java.io.BufferedReader;import java.io.*;import java.net.JarURLConnection;import java.net.URL;import java.util.jar.JarFile;import java.util.jar.JarEntry;/** * @author jacobd *         Date: Dec 8, 2003 */public class JarUtil {    final static String EOL = System.getProperty("line.separator");    /**     * returns an File Object within the given jarFile as a String. jarFile must exist in classpath     * pre: jar containing resource is in the classpath     *     * @param pathToResource     * @return File     */    public static File getResourceFromJarasFile(String pathToResource)            throws IOException {        String[] tokens = pathToResource.split("/");        String fileName = tokens[tokens.length - 1];        tokens = fileName.split("\\.");        File temp = File.createTempFile(tokens[0], "." + tokens[1]);        temp.deleteOnExit();        PrintWriter pr = null;        try {            pr = new PrintWriter(new FileWriter(temp));            String content = getResourceFromJar(pathToResource);            pr.write(content);        }        finally {            if (pr != null) pr.close();        }        return temp;    }    /**     * returns an item within the given jarFile as a String. jarFile must exist in classpath     *     * @param pathToResource     * @return String     */    public static String getResourceFromJar(String pathToResource)            throws IOException {        URL url = ClassLoader.getSystemClassLoader().getResource(                pathToResource);        if (url == null) {            throw new FileNotFoundException(                    "Resource: " + pathToResource + " was not found ");        }        JarURLConnection jarConnection = (JarURLConnection) url.openConnection();        JarFile jar = jarConnection.getJarFile();        if (jar.getJarEntry(pathToResource) == null) {            throw new FileNotFoundException(                    "Resource: " + pathToResource + " was not found ");        }        JarEntry item = jar.getJarEntry(pathToResource);        BufferedReader in = new BufferedReader(                new InputStreamReader(jar.getInputStream(item)));        StringBuffer stb = new StringBuffer();        String buffer;        while (!((buffer = in.readLine()) == null)) {            stb.append(buffer + EOL);        }        return stb.toString();    }    /**     * returns an item within the given jarFile as a Stream     *     * @param pathToResource     * @return String     */    public static InputStream getResourceFromJarasStream(String pathToResource)            throws IOException {        return ClassLoader.getSystemClassLoader().getResourceAsStream(                pathToResource);    }    /**     * Returns the classpath entry of a given item on the classpath. The item should be a jarFile reference     *     * @param jarFile     * @return String     * @throws FileNotFoundException     */    public static String getFilePath(String jarFile)            throws FileNotFoundException {        String sClassPath = System.getProperty("java.class.path");        int jarIndex = sClassPath.indexOf(jarFile);        if (jarIndex <= 0) {            throw new FileNotFoundException(                    "File: " + jarFile + " was not found on the classpath");        }        String P = File.pathSeparator;        String[] pathList = sClassPath.split(P);        for (int i = 0; i < pathList.length; i++) {            if (pathList[i].toLowerCase().endsWith(jarFile.toLowerCase())) {                return pathList[i];            }        }        throw new FileNotFoundException(                "File: " + jarFile + " was not found when iterating classpath");    }}