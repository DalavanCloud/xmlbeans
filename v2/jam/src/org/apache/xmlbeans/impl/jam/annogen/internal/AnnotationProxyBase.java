/*   Copyright 2004 The Apache Software Foundation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.xmlbeans.impl.jam.annogen.internal;

import org.apache.xmlbeans.impl.jam.annogen.provider.AnnotationProxy;
import org.apache.xmlbeans.impl.jam.annogen.provider.ProxyContext;
import org.apache.xmlbeans.impl.jam.annogen.tools.Annogen;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Array;
import java.util.Arrays;

/**
 * <p>Base implementation of AnnotationProxy.  This serves as a base for
 * classes generated by annogen.  Its main responsibility is to accept
 * 'set value' requests from a ProxyPopulator and transform them into
 * reflective invocations on methods on the extending class.</p>
 *
 * @author Patrick Calahan &lt;email: pcal-at-bea-dot-com&gt;
 */
public /*abstract*/ class AnnotationProxyBase implements AnnotationProxy {

  // ========================================================================
  // Variables

  private ProxyContext mContext = null;

  // ========================================================================
  // AnnotationProxy implementation

  public void init(ProxyContext pc) { mContext = pc; }

  /**
   * Just try to set the value via reflection.
   */ 
  public void setSimpleValue(String valueName, Object value, Class declaredType)
  {
    Class[] sig = new Class[] {declaredType};
    Method setter = null;
    try {
      setter = this.getClass().
            getMethod(Annogen.SETTER_PREFIX + valueName, sig);
    } catch (NoSuchMethodException e) {
      mContext.getLogger().error(e);
      return;
    }
    try {
      setter.invoke(this, new Object[]{value});
    } catch (IllegalAccessException e) {
      mContext.getLogger().error(e);
    } catch (InvocationTargetException e) {
      mContext.getLogger().error(e);
    }
  }

  public AnnotationProxy createNestedValue(String name, String declaredTypeName) {
    try {
      Class c = mContext.getProxyTypeMapping().
        getProxyTypeForDeclaredTypeName(declaredTypeName);
      AnnotationProxy ap = (AnnotationProxy)c.newInstance();
      setSimpleValue(name,ap,c);
      return ap;
    } catch(ClassNotFoundException cnfe) {
      mContext.getLogger().error(cnfe);
    } catch (IllegalAccessException e) {
      mContext.getLogger().error(e);
    } catch (InstantiationException e) {
      mContext.getLogger().error(e);
    }
    return null;
  }

  public Object createNestedValueArray(String name,
                                       String declaredTypeName,
                                       int[] dimensions) {
    throw new IllegalStateException("Nested annotation arrays are NYI");
  }

  public Object getValue(String name) {
    return null;//FIXME
  }
}
