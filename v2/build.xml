<project name="Xbean" default="default" basedir=".">

  <property name="build.compiler" value="javac1.4"/>
  <property name="javac.source" value="1.4"/>
  <property name="javac.target" value="1.4"/>
  <property name="product.version" value="1.0.0"/>
  <property name="jam_root" value="jam"/>

  <target name="usage">
    <echo message="The following ant targets are defined:"/>
    <echo message="usage    - this help text"/>
    <echo message="deploy   - builds our implementation jar (xbean.jar)"/>
    <echo message="clean    - cleans out the xbeans directories"/>
    <!--
    <echo message="builddrt - builds, but does not run, the xbean drt"/>
    <echo message="drt      - runs the xbean drt"/>
    -->
  </target>

  <target name="java_version">
    <echo message="${java.version}" />
  </target>

  <target name="clean">
    <delete dir="build"/>
  </target>

  <target name="deploy" depends="xbean" />

  <target name="sources" depends="dirs">
    <zip destfile="build/ar/xbeansrc.zip" basedir="." excludes="build/**"/>
  </target>

  <target name="check.jsr173.jar">
    <condition property="jsr173.jar.exists">
        <available file="build/lib/jsr173.jar"/>
    </condition>
  </target>

  <target name="jsr173.jar" depends="check.jsr173.jar, dirs" unless="jsr173.jar.exists">
    <get dest="build/lib/jsr173.jar"
         src="http://workshop.bea.com/xmlbeans/jsr173v1/jsr173.jar"
         verbose="true" usetimestamp="true" ignoreerrors="true"/>
  </target>

  <target name="check.jsr173_api.jar">
    <condition property="jsr173_api.jar.exists">
        <available file="build/lib/jsr173_api.jar"/>
    </condition>
  </target>

  <target name="jsr173_api.jar" depends="jsr173.jar, check.jsr173_api.jar" unless="jsr173_api.jar.exists">
    <unjar src="build/lib/jsr173.jar" dest="build/lib">
      <patternset>
        <include name="jsr173_1.0_api.jar"/>
    </patternset>
    </unjar>
    <move file="build/lib/jsr173_1.0_api.jar" tofile="build/lib/jsr173_api.jar"/>
  </target>

  <target name="check.jsr173_ri.jar">
    <condition property="jsr173_ri.jar.exists">
        <available file="build/lib/jsr173_ri.jar"/>
    </condition>
  </target>

  <target name="jsr173_ri.jar" depends="jsr173.jar, check.jsr173_ri.jar" unless="jsr173_ri.jar.exists">
    <unjar src="build/lib/jsr173.jar" dest="build/lib">
      <patternset>
        <include name="jsr173_1.0_ri.jar"/>
    </patternset>
    </unjar>
    <move file="build/lib/jsr173_1.0_ri.jar" tofile="build/lib/jsr173_ri.jar"/>
  </target>

    <!-- get resolver.jar -->
    <target name="check.xcresolver.zip">
      <condition property="xcresolver.zip.exists">
          <available file="build/lib/xcresolver.zip"/>
      </condition>
    </target>

    <target name="xcresolver.zip" depends="check.xcresolver.zip, dirs" unless="xcresolver.zip.exists">
      <get dest="build/lib/xcresolver.zip"
           src="http://www.apache.org/dist/xml/commons/binaries/xml-commons-resolver-1.1.zip"
           verbose="true" usetimestamp="true" ignoreerrors="true"/>
    </target>

    <target name="check.resolver.jar">
      <condition property="resolver.jar.exists">
          <available file="build/lib/resolver.jar"/>
      </condition>
    </target>

    <target name="resolver.jar" depends="xcresolver.zip, check.resolver.jar" unless="resolver.jar.exists">
      <unzip src="build/lib/xcresolver.zip" dest="build/lib/">
        <patternset>
          <include name="*/resolver.jar"/>
      </patternset>
      </unzip>
      <move file="build/lib/xml-commons-resolver-1.1/resolver.jar" tofile="build/lib/resolver.jar"/>
      <delete dir="build/lib/xml-commons-resolver-1.1" />
      <delete file="build/lib/xcresolver.zip" />
    </target>


  <target name="xbean" depends="xbean.jar">
    <copy file="build/lib/xbean.jar" tofile="build/ar/xbean.jar"/>
  </target>

  <target name="dirs">
    <mkdir dir="build"/>
    <mkdir dir="build/classes"/>
    <mkdir dir="build/lib"/>
    <mkdir dir="build/ar"/>
    <mkdir dir="build/src"/>
    <mkdir dir="build/private"/>
    <mkdir dir="build/private/classes"/>
    <mkdir dir="build/private/lib"/>
    <mkdir dir="build/test/output"/>
  </target>

  <!--  <target name="default" depends="deploy, builddrt"/> -->
  <target name="default" depends="deploy"/>
  <target name="redeploy" depends="clean, deploy"/>

  <!-- oldxbean.jar target =========================================== -->

  <target name="oldxbean.jar">
    <copy file="external/lib/oldxbean.jar" tofile="build/private/lib/oldxbean.jar"/>
  </target>

  <!-- bootstrap target ============================================== -->

  <target name="bootstrap" depends="xbean">

    <!-- after xbean.jar is built, move it out of the way and clean the project -->
    <tempfile property="bootstrap.jarfile" prefix="oldxbean" suffix=".jar"/>
    <move file="build/ar/xbean.jar" tofile="${bootstrap.jarfile}"/>
    <antcall target="clean" inheritAll="false"/>

    <!-- then move it back into place as oldxbean.jar and do another build -->
    <move file="${bootstrap.jarfile}" tofile="build/private/lib/oldxbean.jar"/>
    <antcall target="xbean" inheritAll="false"/>

    <!-- compare the contents of the first jar to the contents of the second jar -->
    <antcall target="zipcompare.classes" inheritAll="false"/>
    <java classname="zipcompare.ZipCompare"
          classpath="build/private/classes/zipcompare"
          fork="true"
          failonerror="true">
      <arg line="build/ar/xbean.jar build/private/lib/oldxbean.jar"/>
    </java>

    <!-- when everything succeeds, check out oldxbean.jar from perforce -->
    <echo message="==================================="/>
    <echo message="Results match! Bootstrap succeeded."/>
    <echo message="==================================="/>
    <echo message="Attempting to copy oldxbean.jar"/>
    <echo message="If the copy fails, you must check out oldxbean.jar"/>
    <!-- copy oldxbean.jar whether or not perforce succeeded -->
    <echo message="overwriting old external/lib/oldxbean.jar"/>
    <copy file="build/private/lib/oldxbean.jar" tofile="external/lib/oldxbean.jar"/>
  </target>

  <target name="quickbootstrap">
    <echo message="=========================================================="/>
    <echo message="Bootstrapping currently built xbean.jar without verifying."/>
    <echo message="=========================================================="/>
    <copy file="build/ar/xbean.jar" tofile="external/lib/oldxbean.jar"/>
  </target>


  <!-- zipcompare (for checking bootstrap) ============================ -->

  <target name="zipcompare.classes">
    <mkdir dir="build/private/classes/zipcompare"/>
    <javac srcdir="src/zipcompare"
           source="${javac.source}" target="${javac.target}"
           destdir="build/private/classes/zipcompare"
           debug="on"/>
  </target>

  <!-- javadocs ====================================================== -->

  <!-- All docs to build/docs, including guide and javadocs. -->

  <target name="docs" depends="xbean">
    <property name="docs.dir" value="build/docs"/>
    <delete dir="${docs.dir}"/>
    <mkdir dir="${docs.dir}"/>
    <javadoc packagenames="*" sourcepath="src/xmlpublic" classpath="${javadoc.path}" destdir="${docs.dir}/reference" windowtitle="XMLBeans Documentation" source="${javac.source}" target="${javac.target}" stylesheetfile="docs/stylesheet.css">
      <link href="http://e-docs.bea.com/wls/docs81/javadocs/"/>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
      <link href="http://java.sun.com/j2ee/1.4/docs/api/"/>
      <link href="http://xml.apache.org/xerces-j/apiDocs/"/>
      <classpath>
        <pathelement location="build/ar/xbean.jar"/>
      </classpath>
    </javadoc>
    <copy file="docs/xmlbeans.css" tofile="${docs.dir}/xmlbeans.css" />
    <copy todir="${docs.dir}/guide">
      <fileset dir="docs/guide"/>
    </copy>
    <copy todir="${docs.dir}/images">
      <fileset dir="docs/images"/>
    </copy>
  </target>


  <target name="dist" depends="dist-src, dist-bin">
  </target>

  <target name="dist-bin" depends="xbean, docs">
     <delete dir="build/private/xmlbeans-${product.version}"/>
     <delete file="build/private/incubating-xmlbeans-${product.version}.zip"/>
     <delete file="build/private/incubating-xmlbeans-${product.version}.tgz"/>

     <mkdir dir="build/private/xmlbeans-${product.version}"/>
     <copy todir="build/private/xmlbeans-${product.version}">
        <fileset dir="xkit"/>
        <fileset dir="." includes="bin/**"/>
     </copy>
     <copy todir="build/private/xmlbeans-${product.version}/schemas/s4s">
        <fileset dir="src/xsdschema/schema" includes="XMLSchema.xsd"/>
        <fileset dir="src/xmlschema/schema" includes="XML.xsd"/>
     </copy>
     <copy todir="build/private/xmlbeans-${product.version}/schemas">
        <fileset dir="test/src" includes="easypo/*.xsd,easypo/*.xsdconfig"/>
        <fileset dir="test/cases/schema" includes="cyclone/**/*.xsd,j2ee/*.xsd"/>
     </copy>

     <mkdir dir="build/private/xmlbeans-${product.version}/lib"/>
     <copy todir="build/private/xmlbeans-${product.version}/lib" file="build/ar/xbean.jar"/>

     <mkdir dir="build/private/xmlbeans-${product.version}/src/schema"/>
     <copy todir="build/private/xmlbeans-${product.version}/src/schema">
        <fileset dir="src/toolschema"/>
     </copy>

     <mkdir dir="build/private/xmlbeans-${product.version}/docs"/>
     <copy todir="build/private/xmlbeans-${product.version}/docs">
        <fileset dir="build/docs"/>
     </copy>

     <zip destfile="build/private/incubating-xmlbeans-${product.version}.zip"
          basedir="build/private"
          includes="xmlbeans-${product.version}/**"/>
     <tar destfile="build/private/incubating-xmlbeans-${product.version}.tgz"
          basedir="build/private"
          includes="xmlbeans-${product.version}/**"
          compression="gzip"/>
  </target>

  <target name="dist-src" depends="clean, dirs">
     <delete file="build/private/incubating-xmlbeans-${product.version}-src.zip"/>
	 <delete file="build/private/incubating-xmlbeans-${product.version}-src.tgz"/>

	 <zip destfile="build/private/incubating-xmlbeans-${product.version}-src.zip">
     	<zipfileset
     		dir="."
       		includes="**"
       		excludes="build/**"
       		prefix="xmlbeans-${product.version}"/>
     </zip>
	 <tar destfile="build/private/incubating-xmlbeans-${product.version}-src.tgz"
	 	  compression="gzip">
     	<tarfileset
     		dir="."
       		includes="**"
       		excludes="build/**"
       		prefix="xmlbeans-${product.version}"/>
     </tar>
  </target>

  <target name="enum-support.jar"
        depends="dirs, xmlpublic.classes, typeimpl.classes">
    <jar jarfile="build/lib/enum-support.jar" index="false">
      <fileset dir="build/classes/typeimpl/">
        <include name="org/apache/xmlbeans/impl/values/XmlListImpl.class"/>
        <include name="org/apache/xmlbeans/impl/values/XmlObjectBase.class"/>
        <include name="org/apache/xmlbeans/impl/util/XsTypeConverter.class"/>
      </fileset>
      <fileset dir="build/classes/xmlpublic/">
        <include name="org/apache/xmlbeans/XmlCalendar.class"/>
      </fileset>
    </jar>
  </target>

  <!-- previously in xbean.xml -->

  <target name="xbean.jar"
        depends="dirs, xmlpublic.classes, typestore.classes,
                 common.classes, typeimpl.classes, xmlcomp.classes,
                 xmlstore.classes, newstore2.classes,
                 saaj_api.classes, binding.classes, marshal.classes, xpath.classes,
                 oldxbean.jar, xsdschema.classes,
                 xmlinputstream.classes, resolver.jar, xbean_xpath.jar, piccolo.classes">
    <jar jarfile="build/lib/xbean.jar" index="true">
      <fileset dir="build/classes/xmlpublic"/>
      <fileset dir="build/classes/typestore"/>
      <fileset dir="build/classes/common"/>
      <fileset dir="build/classes/typeimpl"/>
      <fileset dir="build/classes/xmlcomp"/>
      <fileset dir="build/classes/configschema"/>
      <fileset dir="build/classes/toolschema"/>
      <fileset dir="build/classes/xsdschema"/>
      <fileset dir="build/classes/xmlschema"/>
      <fileset dir="build/classes/xmlstore"/>
      <fileset dir="build/classes/newstore2"/>
      <fileset dir="build/classes/saaj_api"/>
      <fileset dir="build/classes/xmlinputstream"/>
      <fileset dir="build/classes/binding"/>
      <fileset dir="build/classes/marshal"/>
      <fileset dir="build/classes/repackage"/>
      <fileset dir="build/classes/jam"/>
      <fileset dir="build/classes/piccolo"/>
      <fileset dir="src/license"/>
    </jar>
  </target>

  <!-- build XMLInputStream interface ============================================= -->

  <target name="xmlinputstream.classes" depends="dirs">
    <mkdir dir="build/classes/xmlinputstream"/>
    <javac srcdir="src/xmlinputstream"
        source="${javac.source}" target="${javac.target}"
        destdir="build/classes/xmlinputstream"
        debug="on"/>
  </target>

  <!-- xmlpublic target ============================================== -->

  <target name="xmlpublic.classes" depends="dirs, xmlinputstream.classes, jsr173_api.jar">
    <mkdir dir="build/classes/xmlpublic"/>
    <javac srcdir="src/xmlpublic" destdir="build/classes/xmlpublic" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/lib/jsr173_api.jar"/>
      </classpath>
    </javac>

  </target>

  <target name="xmlpublic.jar" depends="dirs, xmlinputstream.classes, xmlpublic.classes, xmlschema.classes, xsdschema.classes">
    <jar jarfile="build/lib/xmlpublic.jar"  index="true">
      <fileset dir="build/classes/xmlpublic"/>
      <fileset dir="build/classes/xmlschema"/>
      <fileset dir="build/classes/xsdschema"/>
    </jar>
  </target>

  <!-- typestore target ============================================== -->

  <target name="typestore.classes" depends="dirs, xmlpublic.classes, common.classes, xmlinputstream.classes">
    <mkdir dir="build/classes/typestore"/>
    <javac srcdir="src/typestore" destdir="build/classes/typestore" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/common"/>
      </classpath>
    </javac>

  </target>

  <!-- common target ============================================= -->

  <target name="common.classes" depends="dirs, xmlpublic.jar, xmlinputstream.classes, jsr173_api.jar">
    <mkdir dir="build/classes/common"/>
    <javac srcdir="src/common" destdir="build/classes/common" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/lib/xmlpublic.jar"/>
      </classpath>
    </javac>

  </target>

  <!-- typeimpl target ============================================== -->

  <target name="typeimpl.classes" depends="dirs,  xmlstore.classes, newstore2.classes,
      repackage.classes, xmlpublic.classes, typestore.classes, xsdschema.classes,
      configschema.classes, toolschema.classes, jsr173_api.jar, jam">
    <mkdir dir="build/classes/typeimpl"/>
    <javac destdir="build/classes/typeimpl" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/classes/newstore2"/>
        <pathelement location="build/classes/xmlstore"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/common"/>
        <pathelement location="build/classes/repackage"/>
        <pathelement location="build/classes/typestore"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/xmlconfig"/>
        <pathelement location="build/classes/configschema"/>
        <pathelement location="build/classes/xsdschema"/>
        <pathelement location="build/classes/jam"/>
        <pathelement location="build/lib/jsr173_api.jar"/>
      </classpath>

        <src path="src/typeimpl"/>
        <src path="build/src/xmlschema"/>
        <src path="build/src/xsdschema"/>
        <src path="build/src/configschema"/>
        <src path="build/src/toolschema"/>
        <src path="src/xmlconfig"/>
    </javac>

    <!-- Need properties files for regex -->
    <copy
      todir="build/classes/typeimpl">
      <fileset dir="src/typeimpl">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <!-- xmlcomp target =============================================== -->

  <target name="xmlcomp.classes" depends="dirs, repackage.classes, typeimpl.classes, xmlpublic.classes, typestore.classes">
    <mkdir dir="build/classes/xmlcomp"/>
    <javac srcdir="src/xmlcomp" destdir="build/classes/xmlcomp" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/common"/>
        <pathelement location="build/classes/repackage"/>
        <pathelement location="build/classes/typeimpl"/>
        <pathelement location="build/classes/xmlconfig"/>
        <pathelement location="build/classes/configschema"/>
        <pathelement location="build/classes/toolschema"/>
        <pathelement location="build/classes/xsdschema"/>
      </classpath>
    </javac>

  </target>
  <!-- binding target =============================================== -->

  <target name="binding.classes" depends="dirs, repackage.classes, typeimpl.classes, xmlpublic.classes, typestore.classes, configschema.classes, xmlcomp.classes, jam, jsr173.jar">
    <mkdir dir="build/classes/binding"/>
    <javac srcdir="src/binding" destdir="build/classes/binding" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/configschema"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/common"/>
        <pathelement location="build/classes/repackage"/>
        <pathelement location="build/classes/typeimpl"/>
        <pathelement location="build/classes/typestore"/>
        <pathelement location="build/classes/xmlconfig"/>
        <pathelement location="build/classes/configschema"/>
        <pathelement location="build/classes/toolschema"/>
        <pathelement location="build/classes/xsdschema"/>
        <pathelement location="build/classes/jam"/>
        <pathelement location="build/classes/xmlcomp"/>
      </classpath>
    </javac>

  </target>

  <target name='jam'>
    <ant dir='${jam_root}' target='clean' inheritAll='false' />
    <ant dir='${jam_root}' target='all' inheritAll='false' />
    <move todir="build/classes/jam">
      <fileset dir="build/${jam_root}/classes" />
    </move>
    <delete dir='build/${jam_root}'/>

<!-- build new jam as well -->
<!-- remove this once jam_old is dead and jam_root is just 'jam' -->
    <ant dir='jam' target='clean' inheritAll='false' />
    <ant dir='jam' target='all' inheritAll='false' />
    <move todir="build/classes/jam">
      <fileset dir="build/jam/classes" />
    </move>
    <delete dir='build/jam'/>


  </target>

  <!-- marshal target =============================================== -->

  <target name="marshal.classes" depends="dirs, binding.classes, typeimpl.classes, xmlpublic.classes, jsr173_api.jar">
    <mkdir dir="build/classes/marshal"/>
    <javac srcdir="src/marshal" destdir="build/classes/marshal" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/configschema"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/common"/>
        <pathelement location="build/classes/binding"/>
        <pathelement location="build/classes/typeimpl"/>
	<pathelement location="build/classes/newstore2"/>
      </classpath>
    </javac>
  </target>


  <!-- xmlstore target ============================================== -->

  <target name="xmlstore.classes"
        depends="dirs, common.classes, typestore.classes, xmlpublic.classes">
    <mkdir dir="build/classes/xmlstore"/>
    <javac srcdir="src/xmlstore" destdir="build/classes/xmlstore" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath id="xmlstore.compile.path">
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/typestore"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/common"/>
      </classpath>
    </javac>

  </target>

  <!-- saaj_api target ============================================== -->

  <target name="saaj_api.classes" depends="dirs">
    <mkdir dir="build/classes/saaj_api"/>
    <javac srcdir="src/saaj_api" destdir="build/classes/saaj_api" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath id="saaj_api.compile.path">
      </classpath>
    </javac>

  </target>

  <!-- newstore2 target ============================================== -->

  <target name="newstore2.classes"
        depends="dirs, common.classes, xmlpublic.classes, typestore.classes, saaj_api.classes">
    <mkdir dir="build/classes/newstore2"/>
    <javac srcdir="src/newstore2" destdir="build/classes/newstore2" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath id="newstore2.compile.path">
        <pathelement location="build/classes/typestore"/>
        <pathelement location="build/lib/jsr173_api.jar"/>
        <pathelement location="build/classes/xmlinputstream"/>
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/common"/>
        <pathelement location="build/classes/saaj_api"/>
      </classpath>
    </javac>

  </target>

  <!-- bootstrap schema target support ================================ -->


  <!-- xsdschema target =============================================== -->

  <!-- Note that this is a tricky target because it bootstraps xbeans on itself. -->
  <!-- The basic strategy is to rely on the oldxbeans.jar checked into external/lib -->

  <path id="bootstrap.run.path">
    <pathelement location="build/private/lib/oldxbean.jar"/>
    <pathelement location="build/lib/jsr173_api.jar"/>
  </path>

  <path id="bootstrap.compile.path">
    <pathelement location="build/classes/xmlpublic"/>
    <pathelement location="build/lib/jsr173_api.jar"/>
  </path>

  <property name="bootstrap.compile.path" refid="bootstrap.compile.path"/>

  <path id="xsdschema.compile.path">
    <pathelement location="build/classes/xmlschema"/>
    <pathelement location="build/classes/xmlpublic"/>
  </path>

  <property name="xsdschema.compile.path" refid="xsdschema.compile.path"/>

  <target name="xsdschema.check">
    <condition property="xsdschema.notRequired">
        <uptodate property="xsdschema.notRequired" targetfile="build/classes/xsdschema/schema/system/sXMLSCHEMA/index.xsb">
          <srcfiles dir="src/xsdschema" includes="**/*.xsd"/>
        </uptodate>
    </condition>
  </target>

  <target name="xsdschema.classes" depends="xsdschema.check, xmlschema.classes, xmlpublic.classes, oldxbean.jar" unless="xsdschema.notRequired">
    <delete dir="build/classes/xsdschema"/>
    <delete dir="build/src/xsdschema"/>
    <java classname="${bootstrap_schema_compiler}" classpathref="bootstrap.run.path" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg line="${repackage_arg} -name sXMLSCHEMA -cp ${xsdschema.compile.path} -srconly -d build/classes/xsdschema -noann -src build/src/xsdschema src/xsdschema/schema"/>
    </java>
  </target>

  <!-- xmlschema target ============================================= -->

  <!-- Note that this is a tricky target because it bootstraps xbeans on itself. -->
  <!-- The basic strategy is to rely on the oldxbeans.jar checked into external/lib -->

  <target name="xmlschema.check">
    <condition property="xmlschema.notRequired">
        <uptodate property="xmlschema.notRequired" targetfile="build/classes/xmlschema/schema/system/sXMLLANG/index.xsb">
          <srcfiles dir="src/xmlschema" includes="**/*.xsd"/>
        </uptodate>
    </condition>
  </target>

  <target name="xmlschema.classes" depends="xmlschema.check, xmlpublic.classes, oldxbean.jar, jsr173_api.jar" unless="xmlschema.notRequired">
    <delete dir="build/classes/xmlschema"/>
    <delete dir="build/src/xmlschema"/>
    <java classname="${bootstrap_schema_compiler}" classpathref="bootstrap.run.path" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg line="${repackage_arg} -name sXMLLANG -noann -d build/classes/xmlschema -src build/src/xmlschema -srconly src/xmlschema/schema"/>
    </java>
  </target>

  <!-- xmlconfig target =============================================== -->

  <target name="xmlconfig.classes" depends="dirs, xmlpublic.jar, configschema.classes">
    <mkdir dir="build/classes/xmlconfig"/>
    <javac srcdir="src/xmlconfig" destdir="build/classes/xmlconfig" source="${javac.source}" target="${javac.target}" debug="on">
      <classpath>
        <pathelement location="build/lib/xmlpublic.jar"/>
        <pathelement location="build/classes/configschema"/>
      </classpath>
    </javac>

  </target>

  <!-- configschema target ============================================= -->

  <!-- Note that this is a tricky target because it bootstraps xbeans on itself. -->
  <!-- The basic strategy is to rely on the oldxbeans.jar checked into external/lib -->

  <property name="bootstrap.compile.path" refid="bootstrap.compile.path"/>

  <target name="configschema.check">
    <uptodate property="configschema.notRequired" targetfile="build/classes/configschema/schema/system/sXMLCONFIG/index.xsb">
      <srcfiles dir="src/configschema" includes="**/*.xsd"/>
    </uptodate>
  </target>

  <target name="configschema.classes" depends="configschema.check, xmlpublic.classes, oldxbean.jar" unless="configschema.notRequired">
    <delete dir="build/classes/configschema"/>
    <java classname="${bootstrap_schema_compiler}" classpathref="bootstrap.run.path" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg line="${repackage_arg} -name sXMLCONFIG -srconly -noann -src build/src/configschema -d build/classes/configschema src/configschema/schema"/>
    </java>
  </target>

  <!-- toolschema target ============================================= -->

  <!-- Note that this is a tricky target because it bootstraps xbeans on itself. -->
  <!-- The basic strategy is to rely on the oldxbeans.jar checked into external/lib -->

  <property name="bootstrap.compile.path" refid="bootstrap.compile.path"/>

  <target name="toolschema.check">
    <uptodate property="toolschema.notRequired" targetfile="build/classes/toolschema/schema/system/sXMLTOOLS/index.xsb">
      <srcfiles dir="src/toolschema" includes="**/*.xsd"/>
    </uptodate>
  </target>

  <target name="toolschema.classes" depends="toolschema.check, xmlpublic.classes, oldxbean.jar" unless="toolschema.notRequired">
    <delete dir="build/classes/toolschema"/>
    <mkdir dir="build/src/toolschema"/>
    <java classname="${bootstrap_schema_compiler}" classpathref="bootstrap.run.path" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg line="${repackage_arg} -name sXMLTOOLS -srconly -noann -src build/src/toolschema -d build/classes/toolschema src/toolschema"/>
    </java>
  </target>


    <!-- =========================== -->
    <!-- =====   Repackaging  ====== -->
    <!-- =========================== -->

    <target name="edit_build_script">
        <echo message="editing repackage build file: ${token} -->${replacement}"/>

        <java classname="repackage.EditBuildScript" failonerror="true">
            <arg value="${rp_target_dir}/build.xml"/>
            <arg value="${token}"/>
            <arg value="${replacement}"/>
            <classpath>
                <pathelement location="build/classes/repackage"/>
            </classpath>
        </java>
    </target>

    <property name="repackage_arg" value=""/>
    <property name="schema_compiler" value="org.apache.xmlbeans.impl.tool.SchemaCompiler"/>
    <property name="bootstrap_schema_compiler" value="org.apache.xmlbeans.impl.tool.SchemaCompiler"/>
    <property name="piccolo_package_name" value="org.apache.xmlbeans.impl.piccolo"/>

    <!--
        Params to repackage are:

            repackage_spec:

                Of the form from_pkg_1:to_pkg_1;from_pkg_2:to_pkg_2 which specifies which packages
                are to be converted which which which other packages.  Right now, there are two.
                org.apache.xmlbeans and apache.xmlbeans.impl, the public and implementation
                packages.

            rp_source_dir

                From where the sources come...

            rp_target_dir

                To where the repackaged sources are built
    -->


    <target name="repackage" depends="repackage.classes">

        <echo message="Re-packaging XmlBeans"/>

        <property
            name="new_repackage_arg"
            value="-repackage ${repackage_spec}"/>

        <java classname="repackage.Repackage" fork="true" failonerror="true">
            <classpath>
                <pathelement location="build/classes/repackage"/>
            </classpath>
            <arg line="${new_repackage_arg} -f ${rp_source_dir} -t ${rp_target_dir}"/>
        </java>

        <antcall target="edit_build_script">
            <param name="token"       value="repackage_arg"/>
            <param name="replacement" value="${new_repackage_arg}"/>
        </antcall>


        <!-- apply the repachage_spec on old schema_compiler and get the result in new_schema_compiler property -->
        <java classpath="build/classes/repackage" classname="repackage.Repackage"  failonerror="true"
            inputstring="${schema_compiler}" outputproperty="new_schema_compiler">
            <arg line="${new_repackage_arg}"/>
        </java>
        <!-- modify the new build script with the new property -->
        <antcall target="edit_build_script">
            <param name="token"       value="schema_compiler"/>
            <param name="replacement" value="${new_schema_compiler}"/>
        </antcall>


        <!-- apply the repachage_spec on old piccolo_package_name and get the result in new_piccolo_package_name property -->
        <java classpath="build/classes/repackage" classname="repackage.Repackage"  failonerror="true"
            inputstring="${piccolo_package_name}" outputproperty="new_piccolo_package_name">
            <arg line="${new_repackage_arg}"/>
        </java>
        <!-- modify the new build script with the new property -->
        <antcall target="edit_build_script">
            <param name="token"       value="piccolo_package_name"/>
            <param name="replacement" value="${new_piccolo_package_name}"/>
        </antcall>



        <ant dir="${rp_target_dir}" target="xbean" inheritAll="false"/>



        <antcall target="edit_build_script">
            <param name="token"       value="bootstrap_schema_compiler"/>
            <param name="replacement" value="${new_schema_compiler}"/>
        </antcall>

        <ant dir="${rp_target_dir}" target="quickbootstrap" inheritAll="false"/>

    </target>

    <target name="repackage.classes">
        <mkdir dir="build/classes/repackage"/>
        <javac srcdir="src/repackage" destdir="build/classes/repackage" source="${javac.source}" target="${javac.target}" debug="on"/>
    </target>

  <!-- xpath target ============================================= -->

  <target name="xpath.classes" depends="dirs, xmlpublic.jar, xmlstore.classes">
    <mkdir dir="build/classes/xpath"/>
    <javac
       srcdir="src/xpath"
       destdir="build/classes/xpath"
       classpathref="xpath.compile.path"
       source="${javac.source}" target="${javac.target}"
       debug="on">
      <classpath id="xpath.compile.path">
        <pathelement location="build/classes/xmlpublic"/>
        <pathelement location="build/classes/xmlstore"/>
        <pathelement location="external/lib/jaxen-1.1-beta-2.jar"/>
      </classpath>
    </javac>
  </target>

    <target name="xbean_xpath.jar" depends="dirs, xpath.classes">
        <unjar src="external/lib/jaxen-1.1-beta-2.jar" dest="build/classes/xpath" />
        <jar jarfile="build/lib/xbean_xpath.jar" basedir="build/classes/xpath"/>
    </target>


  <!-- TEST Targets ===================================================== -->
  <!-- All targets hook up into testbuild.xml -->
  <property name="testbuild.file" value="testbuild.xml"/>

  <target name="testbuild">
    <ant antfile="${testbuild.file}" target="build"/>
  </target>

  <target name="build.tools">
    <ant antfile="${testbuild.file}" target="build.test.tools"/>
  </target>

  <target name="build.schemas">
    <ant antfile="${testbuild.file}" target="build.schemas"/>
  </target>

  <target name="build.tests">
    <ant antfile="${testbuild.file}" target="build.tests"/>
  </target>

  <target name="testclean">
    <ant antfile="${testbuild.file}" target="clean"/>
  </target>

  <target name="clean.schemas">
    <ant antfile="${testbuild.file}" target="clean.schemas"/>
  </target>

  <target name="clean.tests">
    <ant antfile="${testbuild.file}" target="clean.tests"/>
  </target>

  <target name="clean.cc">
    <ant antfile="${testbuild.file}" target="clean.cc"/>
  </target>

  <target name="run.junit">
    <ant antfile="${testbuild.file}" target="run.junit"/>
  </target>

  <target name="checkintest">
    <ant antfile="${testbuild.file}" target="checkin"/>
    <antcall target="marshal-drt"/>
    <antcall target="binding-drt"/>
  </target>

  <target name="detailed">
    <ant antfile="${testbuild.file}" target="detailed"/>
  </target>



 <!-- test marshal target ============================================= -->

   <target name="test_marshal.classes" depends="marshal.classes">
          <mkdir dir="build/private/classes/marshal"/>
          <javac
              srcdir="test/cases/xbean/marshal"
              destdir="build/private/classes/marshal"
              source="${javac.source}" target="${javac.target}"
              debug="on">
              <classpath>
                  <pathelement location="build/classes/binding"/>
                  <pathelement location="build/classes/marshal"/>
                  <pathelement location="build/classes/common"/>
                  <pathelement location="build/classes/configschema"/>
                  <pathelement location="build/classes/typeimpl"/>
                  <pathelement location="build/classes/xmlinputstream"/>
                  <pathelement location="build/classes/xmlpublic"/>
                  <pathelement location="build/lib/jsr173_api.jar"/>
                  <pathelement location="build/lib/xmlpublic.jar"/>
              </classpath>
          </javac>
   </target>

   <path id="test.compile.path">
   	<pathelement location="build/classes/binding"/>
	<pathelement location="build/classes/marshal"/>
	<pathelement location="build/classes/common"/>
       <pathelement location="external/lib/junit.jar"/>
       <pathelement location="build/ar/xbean.jar"/>
       <pathelement location="build/lib/jsr173_api.jar"/>
       <pathelement location="build/private/classes/marshal"/>
       <pathelement location="build/classes/xmlinputstream"/>
     </path>

     <path id="test.run.path">
       <pathelement location="build/ar/xbean.jar"/>
       <pathelement location="external/lib/junit.jar"/>
  </path>


   <target name="marshal-drt" depends="drt.jar, runmarshal-drt"/>
   <path id="run.marshal.drt">
      <pathelement location="external/lib/junit.jar"/>
          <pathelement location="build/ar/xbean.jar"/>
          <pathelement location="build/lib/jsr173_api.jar"/>
          <pathelement location="build/lib/jsr173_ri.jar"/>
          <pathelement location="build/private/lib/drt.jar"/>
          <pathelement location="build/private/classes/marshal"/>
   </path>

    <property name="drt.marshal.out" value="build/test/output/drt-marshal-product"/>
     <target name="runmarshal-drt" >

   	<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
        <jvmarg value="-ea"/>
        <sysproperty key="xbean.rootdir" value="${basedir}"/>
        <sysproperty key="treeasserts" value="true"/>
        <classpath refid="run.marshal.drt"/>
        <formatter type="plain"/>
        <test name="drt.drtcases.MarshalTests" outfile="${drt.marshal.out}" />
    	</junit>
   </target>

     <target name="binding-drt" depends="drt.jar, runbinding-drt"/>

     <property name="drt.binding.out" value="build/test/output/drt-bind-product"/>
     <target name="runbinding-drt" >

   	<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
        <jvmarg value="-ea"/>
        <sysproperty key="xbean.rootdir" value="${basedir}"/>
        <sysproperty key="treeasserts" value="true"/>
        <classpath>
          <pathelement location="external/lib/junit.jar"/>
          <pathelement location="build/ar/xbean.jar"/>
          <pathelement location="build/lib/jsr173_api.jar"/>
          <pathelement location="build/lib/jsr173_ri.jar"/>
          <pathelement location="build/private/lib/drt.jar"/>
        </classpath>
        <formatter type="plain"/>
        <test name="drt.drtcases.BindingTests" outfile="${drt.binding.out}" />
    	</junit>
   </target>




   <target name="drt.classes" depends="dirs,test_marshal.classes, jsr173_ri.jar">
       <mkdir dir="build/private/classes/drt"/>
       <javac
          destdir="build/private/classes/drt"
          classpathref="test.compile.path"
          source="${javac.source}" target="${javac.target}"
          debug="on">
         <src path="test/cases/xbean/marshal"/>
         <src path="test/src/drt"/>
      </javac>
     </target>

     <target name="drt.jar" depends="drt.classes">
       <jar jarfile="build/private/lib/drt.jar" basedir="build/private/classes/drt"/>
  </target>


  <!-- stsschema (for testing) target ================================ -->

  <path id="scomp.run.path">
    <pathelement location="build/lib/xbean.jar"/>
    <pathelement location="build/lib/jsr173_api.jar"/>
  </path>

  <target name="stsschema.check">
    <uptodate property="stsschema.notRequired" targetfile="build/private/lib/stsschema.jar">
      <srcfiles dir="test/src/stsschema" includes="**/*.xsd"/>
      <srcfiles dir="build/ar" includes="xbean.jar"/>
    </uptodate>
  </target>

  <target name="stsschema.jar" depends="stsschema.check, dirs, xbean" unless="stsschema.notRequired">
    <java classname="${schema_compiler}" classpathref="scomp.run.path" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg line="-out build/private/lib/stsschema.jar test/src/stsschema"/>
    </java>
  </target>

  <!-- Piccolo deployment -->
  <target name="piccolo.classes.check">
    <uptodate property="piccolo.classes.notRequired"
        targetfile="build/ar/xbean.jar" >
      <srcfiles dir="external/lib" includes="**/piccolo_*.jar"/>
    </uptodate>
  </target>

  <target name="piccolo.classes" depends="piccolo.classes.check, dirs" unless="piccolo.classes.notRequired">
    <delete dir="build/private/piccolo" />
    <mkdir dir="build/private/piccolo" />
    <unjar src="external/lib/piccolo_apache_dist_20040629.jar" dest="build/private/piccolo" />

    <echo message="Re-packaging XmlBeans" />

    <java classname="repackage.Repackage" fork="true" failonerror="true">
        <classpath>
            <pathelement location="build/classes/repackage"/>
        </classpath>
        <arg line="-repackage com.bluecast:${piccolo_package_name} -f build/private/piccolo/src -t build/private/piccolo/src_repackage"/>
    </java>

    <delete dir="build/classes/piccolo" />
    <mkdir dir="build/classes/piccolo" />
    <javac
          destdir="build/classes/piccolo"
          classpath=""
          source="1.3" target="1.4"
          debug="on" >
         <src path="build/private/piccolo/src_repackage"/>
    </javac>
  </target>

</project>
